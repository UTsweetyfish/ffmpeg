diff --git a/configure b/configure
index d7efa36..37d59c1 100755
--- a/configure
+++ b/configure
@@ -7211,7 +7211,7 @@ TARGET_SAMPLES=${target_samples:-\$(SAMPLES)}
 CFLAGS-ffplay=${sdl2_cflags}
 CFLAGS_HEADERS=$CFLAGS_HEADERS
 LIB_INSTALL_EXTRA_CMD=$LIB_INSTALL_EXTRA_CMD
-EXTRALIBS=$extralibs
+EXTRALIBS=$extralibs -ldl
 COMPAT_OBJS=$compat_objs
 INSTALL=$install
 LIBTARGET=${LIBTARGET}
diff --git a/fftools/ffmpeg.c b/fftools/ffmpeg.c
index 24307c3..e382be9 100644
--- a/fftools/ffmpeg.c
+++ b/fftools/ffmpeg.c
@@ -138,6 +138,7 @@ static int nb_frames_drop = 0;
 static int64_t decode_error_stat[2];
 
 static int want_sdp = 1;
+static int ready_quit = 0;
 
 static BenchmarkTimeStamps current_time;
 AVIOContext *progress_avio = NULL;
@@ -4647,8 +4648,12 @@ static int transcode_step(void)
         return 0;
     }
 
-    if (ret < 0)
+    if (ret < 0){
+        if(ready_quit){
+            return ret;
+        }
         return ret == AVERROR_EOF ? 0 : ret;
+    }
 
     return reap_filters(0);
 }
@@ -4685,8 +4690,10 @@ static int transcode(void)
 
         /* if 'q' pressed, exits */
         if (stdin_interaction)
-            if (check_keyboard_interaction(cur_time) < 0)
+            if (check_keyboard_interaction(cur_time) < 0){
+                ready_quit = 1;
                 break;
+            }
 
         /* check if there's any stream where output is still needed */
         if (!need_output()) {
@@ -4703,6 +4710,27 @@ static int transcode(void)
         /* dump report by using the output first video and audio streams */
         print_report(0, timer_start, cur_time);
     }
+
+#if HAVE_THREADS
+    if(ready_quit){
+        // 设置禁止写入缓冲区
+        int flag = 0;
+        for (i = 0; i < nb_input_files; i++){
+            InputFile *f = input_files[i];
+            if (!f || !f->in_thread_queue){
+                continue;
+            }
+            flag = 1;
+            av_thread_message_queue_set_err_send(f->in_thread_queue, AVERROR_EOF);
+        }
+        while(flag){
+            ret = transcode_step();
+            if (ret < 0 && ret == AVERROR_EOF) {
+                break;
+            }
+        }
+    }
+#endif
 #if HAVE_THREADS
     free_input_threads();
 #endif
diff --git a/libavcodec/allcodecs.c b/libavcodec/allcodecs.c
index 1b8144a..ee4849f 100644
--- a/libavcodec/allcodecs.c
+++ b/libavcodec/allcodecs.c
@@ -28,6 +28,7 @@
 #include "libavutil/thread.h"
 #include "avcodec.h"
 #include "version.h"
+#include <dlfcn.h>
 
 extern AVCodec ff_a64multi_encoder;
 extern AVCodec ff_a64multi5_encoder;
@@ -781,6 +782,40 @@ AVCodec * codec_list[] = {
 #include "libavcodec/codec_list.c"
 #endif
 
+typedef int (*okToUse7200HwDecFun)();
+AVCodec* get_h264_mwv206_codec(void);
+AVCodec* get_h264_mwv206_codec(void)
+{
+	void* fd = NULL;
+	AVCodec* codec = NULL;
+	int okToRegisterFlag = 0;
+	okToUse7200HwDecFun fun;
+	fd = dlopen("libmwv206dec.so", RTLD_LAZY);
+	if(fd == NULL){
+		//printf("Cannot open libmwv206dec.so, %s\n", dlerror());
+		return NULL;
+	}
+
+	fun = (okToUse7200HwDecFun)dlsym(fd, "okToUse7200HwDec");
+	if(fun != NULL){
+		okToRegisterFlag = fun();
+		if(!okToRegisterFlag){
+			dlclose(fd);
+			return NULL;
+		}
+	}
+
+	codec = (AVCodec*)(dlsym(fd, "ff_h264_mwv206_decoder"));
+	if(codec == NULL){
+		printf("Cannot find ff_h264_mwv206_decoder, %s\n", dlerror());
+		dlclose(fd);
+		return NULL;
+	}
+
+	return codec;
+}
+
+
 static AVOnce av_codec_static_init = AV_ONCE_INIT;
 static void av_codec_init_static(void)
 {
@@ -856,6 +891,13 @@ static AVCodec *find_codec(enum AVCodecID id, int (*x)(const AVCodec *))
     const AVCodec *p, *experimental = NULL;
     void *i = 0;
 
+	if(id == AV_CODEC_ID_H264) {
+		p = get_h264_mwv206_codec();
+		if(p != NULL){
+			return (AVCodec*)p;
+		}
+	}
+
     id = remap_deprecated_codec_id(id);
 
     while ((p = av_codec_iterate(&i))) {
@@ -890,6 +932,13 @@ static AVCodec *find_codec_by_name(const char *name, int (*x)(const AVCodec *))
     if (!name)
         return NULL;
 
+	if(strcmp(name, "h264") == 0  ){
+		p = get_h264_mwv206_codec();
+		if(p != NULL){
+			return (AVCodec*)p;
+		}
+	}
+
     while ((p = av_codec_iterate(&i))) {
         if (!x(p))
             continue;
